#BlueJ class context
comment0.target=OrganisationChart
comment0.text=\ <description\ of\ class\ OrganisationChart>\r\n
comment1.params=
comment1.target=OrganisationChart()
comment1.text=\r\n\ Construct\ a\ new\ OrganisationChart\ object\r\n\ Set\ up\ the\ GUI\r\n
comment10.params=pos
comment10.target=void\ retirePosition(Position)
comment10.text=\ [STEP\ 2\:]\r\n\ Retire\ a\ position\ by\ removing\ it\ from\ the\ tree\ completely.\r\n\ The\ position\ must\ be\ vacant\ and\ cannot\ be\ a\ manager.\r\n
comment11.params=person\ subTree
comment11.target=boolean\ inSubtree(Position,\ Position)
comment11.text=\ [COMPLETION\:]\r\n\ \ Return\ true\ if\ person\ is\ in\ the\ subtree,\ and\ false\ otherwise\r\n\ \ Uses\ \=\=\ to\ determine\ node\ equality\r\n\ \ Check\ if\ person\ is\ the\ same\ as\ the\ root\ of\ subTree\r\n\ \ if\ not,\ check\ if\ in\ any\ of\ the\ subtrees\ of\ the\ team\ members\ of\ the\ root\r\n\ \ \ (recursive\ call,\ which\ must\ return\ true\ if\ it\ finds\ the\ person)\r\n
comment12.params=
comment12.target=void\ setSelectedPosition()
comment12.text=\r\n\ Selecting\ a\ Position\ to\ be\ able\ to\ modify\ its\ attributes\r\n
comment13.params=pos\ target
comment13.target=void\ moveEmployee(Position,\ Position)
comment13.text=\ [STEP3\:]\r\n\ \ \ \ Move\ the\ employee\ from\ their\ current\ position\ (pos)\r\n\ \ \ \ to\ a\ vacant\ position\ (target)\r\n\ \ \ \ Does\ nothing\ if\ pos\ is\ vacant\ or\ the\ target\ is\ not\ vacant.\r\n
comment14.params=pos
comment14.target=void\ retireEmployee(Position)
comment14.text=\ [STEP3\:]\r\n\ Moving\ an\ employee\ to\ retirement.\r\n
comment15.params=
comment15.target=void\ redraw()
comment15.text=\r\n\ Redraw\ the\ chart.\r\n
comment16.params=pos
comment16.target=void\ drawTree(Position)
comment16.text=\ [STEP\ 1\:]\r\n\ \ Recursive\ method\ to\ draw\ all\ nodes\ in\ a\ subtree,\ given\ the\ root\ node.\r\n\ \ (The\ provided\ code\ just\ draws\ the\ root\ node;\r\n\ \ \ you\ need\ to\ make\ it\ draw\ all\ the\ nodes.)\r\n
comment17.params=
comment17.target=void\ drawNewIcon()
comment17.text=\r\n\ Redraw\ the\ new\ Person\ box\r\n
comment18.params=
comment18.target=void\ drawRetireIcon()
comment18.text=\r\n\ Redraw\ the\ retirement\ Icon\r\n
comment19.params=x\ y
comment19.target=boolean\ onNewIcon(double,\ double)
comment19.text=is\ the\ mouse\ position\ on\ the\ New\ Position\ box
comment2.params=
comment2.target=void\ setupGUI()
comment2.text=\r\n\ Set\ up\ the\ GUI\ (buttons\ and\ mouse)\r\n
comment20.params=x\ y
comment20.target=boolean\ onRetirementIcon(double,\ double)
comment20.text=is\ the\ mouse\ position\ on\ the\ retirement\ icon
comment21.params=
comment21.target=void\ makeTestTree()
comment21.text=\r\n\ Makes\ an\ initial\ tree\ so\ you\ can\ test\ your\ program\r\n
comment22.params=empl\ indent
comment22.target=void\ printTree(Position,\ java.lang.String)
comment23.params=arguments
comment23.target=void\ main(java.lang.String[])
comment3.params=v
comment3.target=void\ setRole(java.lang.String)
comment3.text=\r\n\ Deal\ with\ the\ entry\ of\ a\ role\ in\ the\ TextField\r\n\ If\ a\ Position\ in\ the\ organisation\ has\ been\ selected,\ update\ the\ role\ of\ this\ position\r\n\ Otherwise,\ update\ the\ role\ in\ the\ NewIcon\r\n
comment4.params=v
comment4.target=void\ setEmployee(java.lang.String)
comment4.text=\r\n\ Deal\ with\ the\ entry\ of\ initials\ in\ the\ TextField\r\n\ Creates\ an\ Employee\:\ the\ initials\ must\ contain\ some\ text\r\n\ If\ no\ Position\ in\ the\ organisation\ has\ been\ selected,\r\n\ \ \ \ update\ the\ employee\ in\ the\ NewIcon\r\n\ If\ a\ Position\ in\ the\ organisation\ has\ been\ selected,\r\n\ \ \ \ update\ the\ employee\ in\ this\ position\ if\ it\ is\ vacant\r\n
comment5.params=v
comment5.target=Employee\ createEmployee(java.lang.String)
comment5.text=Creates\ an\ Employee\:\ the\ initials\ must\ contain\ some\ text
comment6.params=action\ x\ y
comment6.target=void\ doMouse(java.lang.String,\ double,\ double)
comment6.text=\r\n\ Most\ of\ the\ work\ is\ initiated\ by\ the\ mouse.\r\n\ The\ action\ depends\ on\ where\ the\ mouse\ is\ pressed\:\r\n\ \ \ on\ the\ new\ icon,\r\n\ \ \ a\ position\ in\ the\ tree,\ or\r\n\ \ \ an\ employee\ in\ a\ position\r\n\ and\ where\ it\ is\ released\:\r\n\ \ \ on\ the\ same\ position,\r\n\ \ \ another\ position\ in\ the\ tree,\r\n\ \ \ on\ the\ retirement\ Icon,\ or\r\n\ \ \ empty\ space\r\n\ \r\n\ An\ existing\ position\ will\ be\ moved\ around\ in\ the\ tree,\ removed,\r\n\ \ \ \ or\ repositioned.\r\n\ A\ new\ position\ can\ be\ added\ into\ the\ tree.\r\n\ An\ existing\ employee\ will\ be\ moved\ into\ a\ vacant\ position\ or\ retiring.\r\n\ A\ new\ employee\ can\ be\ added\ into\ a\ vacant\ position.\r\n
comment7.params=x\ y\ pos
comment7.target=Position\ findPosition(double,\ double,\ Position)
comment7.text=\ \r\n\ Find\ and\ return\ a\ position\ that\ is\ currently\ placed\ over\ the\ position\ (x,y).\ \r\n\ Must\ do\ a\ recursive\ search\ of\ the\ subtree\ whose\ root\ is\ the\ given\ position.\r\n\ [STEP\ 2\:]\ \r\n\ \ \ \ Returns\ a\ position\ if\ it\ finds\ one,\r\n\ \ \ \ Returns\ null\ if\ it\ doesn't.\r\n\ [Completion\:]\ If\ (x,y)\ is\ on\ two\ positions,\ it\ should\ return\ the\ top\ one.\r\n
comment8.params=newPos\ target
comment8.target=void\ addNewPosition(Position,\ Position)
comment8.text=\ [STEP\ 2\:]\ \r\n\ Add\ the\ new\ position\ to\ the\ target's\ team.\r\n
comment9.params=pos\ target
comment9.target=void\ movePosition(Position,\ Position)
comment9.text=\ [STEP\ 2\:]\ \r\n\ \ \ \ Move\ a\ current\ position\ (pos)\ to\ another\ position\ (target)\r\n\ \ \ \ by\ adding\ the\ position\ to\ the\ team\ of\ the\ target,\r\n\ \ \ \ (and\ bringing\ the\ whole\ subtree\ of\ the\ position\ with\ them)\r\n\r\n\ \ [COMPLETION\:]\r\n\ \ \ Moving\ the\ CEO\ is\ a\ problem,\ and\ shouldn't\ be\ allowed.\ \r\n\ \ \ In\ general,\ moving\ any\ position\ to\ a\ target\ that\ is\ in\ the\r\n\ \ \ position's\ subtree\ is\ a\ problem\ and\ should\ not\ be\ allowed.\ (Why?)\r\n
numComments=24
