#BlueJ class context
comment0.target=Position
comment0.text=\r\n\ Represents\ a\ position\ in\ an\ organisation\r\n\ Normal\ positions\ have\ an\ employee\ and\ a\ role\ (and\ could\ have\r\n\ \ \ further\ information)\r\n\ All\ positions\ (other\ than\ the\ CEO)\ have\ a\ manager,\ the\ position\r\n\ \ \ that\ this\ position\ reports\ to.\r\n\ A\ manager\ is\ a\ position\ that\ has\ a\ non\ empty\ team\ consisting\ of\r\n\ \ \ a\ set\ of\ positions.\r\n\ \ \ (If\ a\ position\ has\ an\ empty\ team,\ then\ it\ is\ not\ a\ manager.)\r\n\ A\ Position\ object\ can\ also\ represent\ a\ vacant\ position\ in\ the\r\n\ \ \ organisation\ characterised\ by\ the\ absence\ of\ an\ employee.\r\n\ \ A\ vacant\ position\ has\ a\ manager\ and\ may\ have\ a\ non\ empty\ team.\r\n\ \ A\ vacant\ position\ is\ filled\ by\ giving\ it\ an\ Employee\ object.\r\n\r\n\ A\ position\ is\ drawn\ as\ a\ rectangle.\ It\ contains\ the\ role\ and\ an\r\n\ \ \ oval\ representing\ the\ employee.\r\n\ Every\ position\ (except\ the\ CEO)\ will\ be\ drawn\ with\ a\ link\ to\ \r\n\ \ \ their\ manager.\r\n\ The\ location\ where\ a\ team\ member\ of\ a\ manager\ is\ drawn\ is\ one\r\n\ \ \ layer\ down\ from\ the\ manager,\ at\ a\ horizontal\ location\ specified\r\n\ \ \ by\ the\ position's\ offset\ -\ how\ far\ to\ the\ right\ (or\ left)\ of\ \r\n\ \ \ the\ manager.\r\n\ \ \ This\ means\ that\ if\ the\ manager\ is\ moved\ around\ on\ the\ screen,\ \r\n\ \ \ the\ team\ members\ (and\ their\ team\ members,\ and\ ....)\ will\r\n\ \ \ automatically\ move\ with\ them.\r\n
comment1.params=role\ employee
comment1.target=Position(java.lang.String,\ Employee)
comment1.text=\r\n\ Construct\ a\ new\ Position\ object\ with\ a\ role\ and\ a\ given\ employee\r\n
comment10.params=r
comment10.target=void\ setRole(java.lang.String)
comment10.text=Sets\ the\ role\ of\ this\ Position
comment11.params=
comment11.target=void\ clearRole()
comment11.text=Clear\ the\ role\ of\ the\ position
comment12.params=
comment12.target=java.util.Set\ getTeam()
comment12.text=Returns\ the\ set\ of\ positions\ in\ the\ team,
comment13.params=
comment13.target=boolean\ isManager()
comment13.text=\r\n\ Returns\ true\ iff\ this\ position\ is\ managing\ any\ other\ positions\r\n
comment14.params=
comment14.target=boolean\ isVacant()
comment14.text=\r\n\ True\ if\ the\ Position\ is\ a\ vacant\ empty\ position,\ needing\ to\ be\ filled.\r\n
comment15.params=
comment15.target=void\ makeVacant()
comment15.text=\r\n\ Clear\ employee\ of\ the\ position,\r\n\ but\ leave\ the\ role,\ the\ manager\ and\ team\ members.\r\n\ Effectively\ makes\ this\ a\ vacant\ position\ within\ the\ hierarchy.\r\n
comment16.params=emp
comment16.target=void\ fillVacancy(Employee)
comment16.text=\r\n\ Fill\ a\ vacant\ position\ with\ this\ employee\r\n\ Assumes\ the\ Position\ is\ vacant.\r\n
comment17.params=x
comment17.target=void\ moveOffset(double)
comment17.text=\r\n\ Move\ the\ value\ offset\ so\ that\ the\ Position\ will\ be\ drawn\ at\ location\ x\ \r\n\ Offset\ specifies\ where\ to\ draw\ the\ position,\ relative\ to\ their\ manager.\r\n\ Offset\ is\ the\ distance\ to\ the\ right\ (or\ left,\ if\ negative)\ of\ the\ manager's\ location.\r\n
comment18.params=off
comment18.target=void\ setOffset(double)
comment18.text=\r\n\ Set\ the\ offset\ value\ (horizontal\ location\ of\ this\ position\ relative\ to\ manager)\r\n\ Only\ needed\ for\ constructing\ test\ hierarchy\ or\ loading\ from\ a\ file.\r\n
comment19.params=
comment19.target=double\ getTop()
comment19.text=\r\n\ Return\ the\ top\ of\ this\ position\ box\ (internal\ use\ only)\r\n\ Calculated\ \r\n
comment2.params=role\ initials\ id\ offset
comment2.target=Position(java.lang.String,\ java.lang.String,\ int,\ double)
comment2.text=\r\n\ Construct\ a\ new\ Position\ object\ with\ the\ given\ role,\ initials,\ and\ offset\r\n\ Useful\ for\ loading\ from\ file\ \r\n
comment20.params=
comment20.target=double\ getX()
comment20.text=\r\n\ Horizontal\ center\ of\ this\ position\ box\ (internal\ use\ only)\r\n\ Recursive\ method,\ to\ compute\ center\ from\ the\ offset\ and\ the\ center\ of\ the\ manager.\r\n
comment21.params=x\ y
comment21.target=boolean\ on(double,\ double)
comment21.text=\r\n\ Returns\ true\ iff\ the\ point\ (x,y)\ is\ on\ top\ of\ where\r\n\ \ this\ position\ is\ currently\ drawn.\r\n
comment22.params=x\ y
comment22.target=boolean\ onEmployee(double,\ double)
comment22.text=\r\n\ Returns\ true\ iff\ the\ point\ (x,y)\ is\ on\ top\ of\ where\r\n\ \ this\ position's\ employee\ is\ currently\ drawn.\r\n
comment23.params=
comment23.target=java.lang.String\ toString()
comment23.text=\r\n\ Returns\ a\ string\ containing\ the\ details\ of\ a\ position.\r\n\ if\ the\ role\ or\ initials\ are\ null,\ then\ will\ be\ given\ as\ "??"\r\n
comment24.params=
comment24.target=java.lang.String\ toStringFull()
comment24.text=\r\n\ Returns\ a\ string\ containing\ the\ details\ of\ a\ position,\ plus\r\n\ offset\ and\ number\ of\ members\ of\ their\ team.\r\n\ initials\ and\ role\ may\ be\ "NULL"\r\n\ May\ be\ useful\ for\ saving\ to\ files\r\n
comment25.params=
comment25.target=void\ draw()
comment25.text=\r\n\ Draw\ a\ box\ representing\ the\ Position,\ and\ \r\n\ connect\ it\ to\ its\ manager\ (if\ there\ is\ a\ manager)\r\n\ If\ the\ position\ is\ filled,\ the\ employee\ is\ represented\ by\ an\ oval\r\n
comment26.params=flag
comment26.target=void\ highlightPosition(boolean)
comment26.text=\r\n\ Highlight\ on\ and\ off\ the\ Position\r\n
comment27.params=flag
comment27.target=void\ pressPosition(boolean)
comment27.text=\r\n\ Indicate\ whether\ mouse\ pressed\ on\ the\ Position\r\n
comment28.params=flag
comment28.target=void\ pressEmployee(boolean)
comment28.text=\r\n\ Indicate\ whether\ mouse\ pressed\ on\ the\ Employee\r\n
comment3.params=newMemb
comment3.target=void\ addToTeam(Position)
comment3.text=\ [STEP\ 1\:]\r\n\ Add\ a\ new\ member\ to\ the\ team\ managed\ by\ this\ position,\ and\r\n\ ensure\ that\ the\ new\ team\ member\ has\ this\ position\ as\ their\ manager\r\n
comment4.params=mang
comment4.target=void\ setManager(Position)
comment5.params=teamMemb
comment5.target=void\ removeFromTeam(Position)
comment5.text=\ [STEP\ 2\:]\r\n\ Remove\ a\ member\ of\ the\ team\ managed\ by\ this\ position,\ and\r\n\ ensure\ that\ the\ team\ member\ no\ longer\ has\ this\ position\ as\ their\ manager\r\n
comment6.params=
comment6.target=Employee\ getEmployee()
comment6.text=Returns\ the\ employee\ in\ this\ Position
comment7.params=e
comment7.target=void\ setEmployee(Employee)
comment7.text=Returns\ the\ employee\ in\ this\ Position
comment8.params=
comment8.target=Position\ getManager()
comment8.text=Returns\ the\ manager\ of\ this\ Position
comment9.params=
comment9.target=java.lang.String\ getRole()
comment9.text=Returns\ the\ role\ of\ this\ Position
numComments=29
